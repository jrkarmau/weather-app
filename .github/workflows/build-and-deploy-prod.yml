name: Build and Deploy to production

on:
  release:
    types:
      - published

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get latest release tag
      id: release
      run: |
        IMAGE_TAG=$(curl --silent "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest" | jq -r .tag_name)
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Build the Docker image
      run: >-
        docker build .
        --file Dockerfile
        --tag ghcr.io/jrkarmau/weather-app:${{ env.IMAGE_TAG }}

    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.PAT_TOKEN }}" | docker login ghcr.io -u jrkarmau --password-stdin

    - name: Push the Docker image to GitHub Container Registry
      run: docker push ghcr.io/jrkarmau/weather-app:${{ env.IMAGE_TAG }}
  
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GHK_JSON_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install gke-gcloud-auth-plugin
        run: |
          curl -LO "https://github.com/googlecloudplatform/k8s-gke-auth/releases/download/v0.4.0/gke-gcloud-auth-plugin-linux-amd64"
          chmod +x ./gke-gcloud-auth-plugin-linux-amd64
          sudo mv ./gke-gcloud-auth-plugin-linux-amd64 /usr/local/bin/gke-gcloud-auth-plugin

      - name: Get latest release tag
        id: release
        run: |
          IMAGE_TAG=$(curl --silent "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest" | jq -r .tag_name)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Debug Authentication
        run: |
          gcloud auth list
          gcloud container clusters list --project ${{ secrets.GKE_PROJECT_ID }} --zone ${{ secrets.GKE_ZONE }}
        

      - name: Apply Kubernetes deployment manifest
        env:
          GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
          GKE_ZONE: ${{ secrets.GKE_ZONE }}
          GCP_PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --region $GKE_ZONE --project $GCP_PROJECT_ID
          # Use envsubst to substitute the IMAGE_TAG in the manifest before applying it
          envsubst < manifests/deployment.yaml | kubectl apply -f -
          kubectl set env deployment/weather-app REACT_APP_OPENWEATHER_API_KEY=${{ secrets.REACT_APP_OPENWEATHER_API_KEY }} REACT_APP_WEATHERAPI_API_KEY=${{ secrets.REACT_APP_WEATHERAPI_API_KEY }}
          kubectl rollout status deployment/weather-app
