name: Build and Deploy to production

on:
  release:
    types:
      - published

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get latest release tag
      id: release
      run: |
        IMAGE_TAG=$(curl --silent "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest" | jq -r .tag_name)
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Build the Docker image
      run: >-
        docker build .
        --file Dockerfile
        --tag ghcr.io/jrkarmau/weather-app:${{ env.IMAGE_TAG }}

    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.PAT_TOKEN }}" | docker login ghcr.io -u jrkarmau --password-stdin

    - name: Push the Docker image to GitHub Container Registry
      run: docker push ghcr.io/jrkarmau/weather-app:${{ env.IMAGE_TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GHK_JSON_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Install GKE gcloud auth plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} \
            --zone ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GKE_PROJECT_ID }}

      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.PAT_TOKEN }}" | docker login ghcr.io -u jrkarmau --password-stdin

      - name: Get latest release tag
        id: release
        run: |
          IMAGE_TAG=$(curl --silent "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest" | jq -r .tag_name)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Apply Deploy Manifest
        run: |
          # Replace the IMAGE_TAG and inject environment variables into the manifest
          sed "s|\$IMAGE_TAG|${{ env.IMAGE_TAG }}|g" manifests/deployment.yaml | \
          sed "s|\$REACT_APP_OPENWEATHER_API_KEY|${{ secrets.REACT_APP_OPENWEATHER_API_KEY }}|g" | \
          sed "s|\$REACT_APP_WEATHERAPI_API_KEY|${{ secrets.REACT_APP_WEATHERAPI_API_KEY }}|g" | \
          kubectl apply -f -

      - name: Verify Deployment
        run: |
          kubectl get deployments
          kubectl get pods
